{"ast":null,"code":"// Mock data for play spaces\nconst mockPlaySpaces = [{\n  id: '1',\n  name: 'Central Park Tennis',\n  sport: 'Tennis',\n  location: {\n    lat: 28.6129,\n    lng: 77.2295,\n    address: 'Central Park, Block A'\n  },\n  availableTime: '6 AM - 10 PM',\n  price: '₹500/hour',\n  facilities: ['Floodlights', 'Equipment Rental', 'Parking']\n}, {\n  id: '2',\n  name: 'SportZone Basketball',\n  sport: 'Basketball',\n  location: {\n    lat: 28.6139,\n    lng: 77.2195,\n    address: 'SportZone Complex, Sector 15'\n  },\n  availableTime: '24/7',\n  price: '₹300/hour',\n  facilities: ['Indoor Court', 'Locker Room', 'Cafe']\n}, {\n  id: '3',\n  name: 'Green Field Soccer',\n  sport: 'Football',\n  location: {\n    lat: 28.6159,\n    lng: 77.2175,\n    address: 'Green Field Arena, Block D'\n  },\n  availableTime: '5 AM - 11 PM',\n  price: '₹800/hour',\n  facilities: ['Natural Grass', 'Floodlights', 'Changing Rooms']\n}, {\n  id: '4',\n  name: 'Cricket Stadium',\n  sport: 'Cricket',\n  location: {\n    lat: 28.6189,\n    lng: 77.2355,\n    address: 'Stadium Complex, Sector 20'\n  },\n  availableTime: '6 AM - 9 PM',\n  price: '₹1000/hour',\n  facilities: ['Cricket Pitch', 'Practice Nets', 'Equipment Rental', 'Pavilion']\n}, {\n  id: '5',\n  name: 'Badminton Arena',\n  sport: 'Badminton',\n  location: {\n    lat: 28.6219,\n    lng: 77.2405,\n    address: 'Indoor Sports Complex, Block F'\n  },\n  availableTime: '7 AM - 11 PM',\n  price: '₹400/hour',\n  facilities: ['Indoor Courts', 'Air Conditioning', 'Equipment Shop']\n}, {\n  id: '6',\n  name: 'Multi-Sport Complex',\n  sport: 'Multiple',\n  location: {\n    lat: 28.6249,\n    lng: 77.2455,\n    address: 'Sports City, Sector 25'\n  },\n  availableTime: '5 AM - 10 PM',\n  price: '₹600/hour',\n  facilities: ['Multiple Courts', 'Gym', 'Swimming Pool', 'Cafe']\n}, {\n  id: '7',\n  name: 'Table Tennis Center',\n  sport: 'Table Tennis',\n  location: {\n    lat: 28.6279,\n    lng: 77.2505,\n    address: 'Indoor Games Complex, Block H'\n  },\n  availableTime: '9 AM - 9 PM',\n  price: '₹200/hour',\n  facilities: ['Professional Tables', 'Training Programs', 'Air Conditioning']\n}, {\n  id: '8',\n  name: 'Volleyball Court',\n  sport: 'Volleyball',\n  location: {\n    lat: 28.6309,\n    lng: 77.2555,\n    address: 'Beach Sports Arena, Sector 30'\n  },\n  availableTime: '6 AM - 8 PM',\n  price: '₹300/hour',\n  facilities: ['Sand Court', 'Night Lighting', 'Changing Rooms']\n}];\n\n// Function to calculate distance between two points using Haversine formula\nfunction getDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Radius of the Earth in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Distance in km\n}\n\n// Function to get nearby play spaces within a radius\nexport function getNearbyPlaySpaces(userLat, userLng, radiusKm = 5) {\n  // For mock data, we'll adjust the locations relative to user's position\n  const adjustedPlaySpaces = mockPlaySpaces.map(space => {\n    // Create slight variations in location\n    const latOffset = (Math.random() - 0.5) * 0.01; // ~1km variation\n    const lngOffset = (Math.random() - 0.5) * 0.01;\n    return {\n      ...space,\n      location: {\n        ...space.location,\n        lat: userLat + latOffset,\n        lng: userLng + lngOffset\n      },\n      distance: getDistance(userLat, userLng, userLat + latOffset, userLng + lngOffset)\n    };\n  });\n\n  // Filter spaces within the radius and sort by distance\n  return adjustedPlaySpaces.filter(space => space.distance <= radiusKm).sort((a, b) => a.distance - b.distance);\n}","map":{"version":3,"names":["mockPlaySpaces","id","name","sport","location","lat","lng","address","availableTime","price","facilities","getDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","getNearbyPlaySpaces","userLat","userLng","radiusKm","adjustedPlaySpaces","map","space","latOffset","random","lngOffset","distance","filter","sort","b"],"sources":["/Users/harsh/Desktop/React projects/justAi/playspace/src/services/playSpaceService.js"],"sourcesContent":["// Mock data for play spaces\nconst mockPlaySpaces = [\n  {\n    id: '1',\n    name: 'Central Park Tennis',\n    sport: 'Tennis',\n    location: {\n      lat: 28.6129,\n      lng: 77.2295,\n      address: 'Central Park, Block A'\n    },\n    availableTime: '6 AM - 10 PM',\n    price: '₹500/hour',\n    facilities: ['Floodlights', 'Equipment Rental', 'Parking']\n  },\n  {\n    id: '2',\n    name: 'SportZone Basketball',\n    sport: 'Basketball',\n    location: {\n      lat: 28.6139,\n      lng: 77.2195,\n      address: 'SportZone Complex, Sector 15'\n    },\n    availableTime: '24/7',\n    price: '₹300/hour',\n    facilities: ['Indoor Court', 'Locker Room', 'Cafe']\n  },\n  {\n    id: '3',\n    name: 'Green Field Soccer',\n    sport: 'Football',\n    location: {\n      lat: 28.6159,\n      lng: 77.2175,\n      address: 'Green Field Arena, Block D'\n    },\n    availableTime: '5 AM - 11 PM',\n    price: '₹800/hour',\n    facilities: ['Natural Grass', 'Floodlights', 'Changing Rooms']\n  },\n  {\n    id: '4',\n    name: 'Cricket Stadium',\n    sport: 'Cricket',\n    location: {\n      lat: 28.6189,\n      lng: 77.2355,\n      address: 'Stadium Complex, Sector 20'\n    },\n    availableTime: '6 AM - 9 PM',\n    price: '₹1000/hour',\n    facilities: ['Cricket Pitch', 'Practice Nets', 'Equipment Rental', 'Pavilion']\n  },\n  {\n    id: '5',\n    name: 'Badminton Arena',\n    sport: 'Badminton',\n    location: {\n      lat: 28.6219,\n      lng: 77.2405,\n      address: 'Indoor Sports Complex, Block F'\n    },\n    availableTime: '7 AM - 11 PM',\n    price: '₹400/hour',\n    facilities: ['Indoor Courts', 'Air Conditioning', 'Equipment Shop']\n  },\n  {\n    id: '6',\n    name: 'Multi-Sport Complex',\n    sport: 'Multiple',\n    location: {\n      lat: 28.6249,\n      lng: 77.2455,\n      address: 'Sports City, Sector 25'\n    },\n    availableTime: '5 AM - 10 PM',\n    price: '₹600/hour',\n    facilities: ['Multiple Courts', 'Gym', 'Swimming Pool', 'Cafe']\n  },\n  {\n    id: '7',\n    name: 'Table Tennis Center',\n    sport: 'Table Tennis',\n    location: {\n      lat: 28.6279,\n      lng: 77.2505,\n      address: 'Indoor Games Complex, Block H'\n    },\n    availableTime: '9 AM - 9 PM',\n    price: '₹200/hour',\n    facilities: ['Professional Tables', 'Training Programs', 'Air Conditioning']\n  },\n  {\n    id: '8',\n    name: 'Volleyball Court',\n    sport: 'Volleyball',\n    location: {\n      lat: 28.6309,\n      lng: 77.2555,\n      address: 'Beach Sports Arena, Sector 30'\n    },\n    availableTime: '6 AM - 8 PM',\n    price: '₹300/hour',\n    facilities: ['Sand Court', 'Night Lighting', 'Changing Rooms']\n  }\n];\n\n// Function to calculate distance between two points using Haversine formula\nfunction getDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Radius of the Earth in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c; // Distance in km\n}\n\n// Function to get nearby play spaces within a radius\nexport function getNearbyPlaySpaces(userLat, userLng, radiusKm = 5) {\n  // For mock data, we'll adjust the locations relative to user's position\n  const adjustedPlaySpaces = mockPlaySpaces.map(space => {\n    // Create slight variations in location\n    const latOffset = (Math.random() - 0.5) * 0.01; // ~1km variation\n    const lngOffset = (Math.random() - 0.5) * 0.01;\n    \n    return {\n      ...space,\n      location: {\n        ...space.location,\n        lat: userLat + latOffset,\n        lng: userLng + lngOffset\n      },\n      distance: getDistance(\n        userLat,\n        userLng,\n        userLat + latOffset,\n        userLng + lngOffset\n      )\n    };\n  });\n\n  // Filter spaces within the radius and sort by distance\n  return adjustedPlaySpaces\n    .filter(space => space.distance <= radiusKm)\n    .sort((a, b) => a.distance - b.distance);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}